# Generated by Django 4.1.10 on 2024-03-18 16:02

import application.models.application
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('dataset', '0001_initial'),
        ('setting', '0001_initial'),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Application',
            fields=[
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='Creating time.')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='Change time.')),
                ('id', models.UUIDField(default=uuid.uuid1, editable=False, primary_key=True, serialize=False, verbose_name='The key.id')),
                ('name', models.CharField(max_length=128, verbose_name='Application Name')),
                ('desc', models.CharField(default='', max_length=512, verbose_name='Citation of description')),
                ('prologue', models.CharField(default='', max_length=1024, verbose_name='Opening White.')),
                ('dialogue_number', models.IntegerField(default=0, verbose_name='Number of meetings')),
                ('dataset_setting', models.JSONField(default=application.models.application.get_dataset_setting_dict, verbose_name='Set up the data set.')),
                ('model_setting', models.JSONField(default=application.models.application.get_model_setting_dict, verbose_name='Model parameters related settings')),
                ('problem_optimization', models.BooleanField(default=False, verbose_name='Problems optimized')),
                ('model', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='setting.model')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='users.user')),
            ],
            options={
                'db_table': 'application',
            },
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='Creating time.')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='Change time.')),
                ('id', models.UUIDField(default=uuid.uuid1, editable=False, primary_key=True, serialize=False, verbose_name='The key.id')),
                ('abstract', models.CharField(max_length=256, verbose_name='The summary')),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='application.application')),
            ],
            options={
                'db_table': 'application_chat',
            },
        ),
        migrations.CreateModel(
            name='ApplicationAccessToken',
            fields=[
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='Creating time.')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='Change time.')),
                ('application', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='application.application', verbose_name='Applicationsid')),
                ('access_token', models.CharField(max_length=128, unique=True, verbose_name='User Open Access Certificationtoken')),
                ('is_active', models.BooleanField(default=True, verbose_name='Opening public access.')),
                ('access_num', models.IntegerField(default=100, verbose_name='Number of Visits')),
                ('white_active', models.BooleanField(default=False, verbose_name='Open the white list.')),
                ('white_list', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=128), default=list, size=None, verbose_name='List of white lists')),
            ],
            options={
                'db_table': 'application_access_token',
            },
        ),
        migrations.CreateModel(
            name='ChatRecord',
            fields=[
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='Creating time.')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='Change time.')),
                ('id', models.UUIDField(default=uuid.uuid1, editable=False, primary_key=True, serialize=False, verbose_name='The key.id')),
                ('vote_status', models.CharField(choices=[('-1', 'not voted.'), ('0', 'agreed'), ('1', 'opposed')], default='-1', max_length=10, verbose_name='Voting')),
                ('problem_text', models.CharField(max_length=1024, verbose_name='The problem')),
                ('answer_text', models.CharField(max_length=4096, verbose_name='The Answer')),
                ('message_tokens', models.IntegerField(default=0, verbose_name='requestedtokenNumber of')),
                ('answer_tokens', models.IntegerField(default=0, verbose_name='ReplytokenNumber of')),
                ('const', models.IntegerField(default=0, verbose_name='Total costs')),
                ('details', models.JSONField(default=dict, verbose_name='Details of Dialogue')),
                ('improve_paragraph_id_list', django.contrib.postgres.fields.ArrayField(base_field=models.UUIDField(blank=True), default=list, size=None, verbose_name='Improve the list of notes')),
                ('run_time', models.FloatField(default=0, verbose_name='Working long.')),
                ('index', models.IntegerField(verbose_name='The dialogue.')),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='application.chat')),
            ],
            options={
                'db_table': 'application_chat_record',
            },
        ),
        migrations.CreateModel(
            name='ApplicationPublicAccessClient',
            fields=[
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='Creating time.')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='Change time.')),
                ('id', models.UUIDField(primary_key=True, serialize=False, verbose_name='Public access link clientid')),
                ('access_num', models.IntegerField(default=0, verbose_name='Number of visits.')),
                ('intraday_access_num', models.IntegerField(default=0, verbose_name='Number of visits on that day.')),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='application.application', verbose_name='Applicationsid')),
            ],
            options={
                'db_table': 'application_public_access_client',
            },
        ),
        migrations.CreateModel(
            name='ApplicationDatasetMapping',
            fields=[
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='Creating time.')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='Change time.')),
                ('id', models.UUIDField(default=uuid.uuid1, editable=False, primary_key=True, serialize=False, verbose_name='The key.id')),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='application.application')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dataset.dataset')),
            ],
            options={
                'db_table': 'application_dataset_mapping',
            },
        ),
        migrations.CreateModel(
            name='ApplicationApiKey',
            fields=[
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='Creating time.')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='Change time.')),
                ('id', models.UUIDField(default=uuid.uuid1, editable=False, primary_key=True, serialize=False, verbose_name='The key.id')),
                ('secret_key', models.CharField(max_length=1024, unique=True, verbose_name='The Secret Key')),
                ('is_active', models.BooleanField(default=True, verbose_name='is opened.')),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='application.application', verbose_name='Applicationsid')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.user', verbose_name='Usersid')),
            ],
            options={
                'db_table': 'application_api_key',
            },
        ),
    ]
